name: AI Banking Assistant CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: banking_assistant_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx

    - name: Create test environment file
      run: |
        cat > .env << EOF
        ENVIRONMENT=test
        PGHOST=localhost
        PGDATABASE=banking_assistant_test
        PGUSER=postgres
        PGPASSWORD=postgres
        PGPORT=5432
        DATABASE_SCHEMA=banking_assistant
        GEMINI_API_KEY=test_key_for_ci
        SECRET_KEY=test_secret_key_for_ci_minimum_32_chars
        EOF

    - name: Set up database
      run: |
        python scripts/setup.py

    - name: Run tests
      run: |
        pytest -v tests/ || echo "No tests found - skipping"

    - name: Test application startup
      run: |
        timeout 30s uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        curl -f http://localhost:8000/api/health || exit 1
        curl -f http://localhost:8000/ || exit 1

    - name: Check code quality
      run: |
        # Install linting tools
        pip install black flake8 isort
        
        # Check code formatting
        black --check app/ scripts/ || echo "Consider running: black app/ scripts/"
        
        # Check imports
        isort --check-only app/ scripts/ || echo "Consider running: isort app/ scripts/"
        
        # Check for common issues
        flake8 app/ scripts/ --max-line-length=88 --extend-ignore=E203 || echo "Linting issues found"

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Check for security vulnerabilities
      run: |
        # Check dependencies for known vulnerabilities
        safety check || echo "Security issues found in dependencies"
        
        # Scan code for security issues
        bandit -r app/ scripts/ -f json -o bandit-report.json || echo "Security issues found in code"

    - name: Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: bandit-report.json

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Render (Staging)
      run: |
        echo "🚀 Deploying to staging environment..."
        # Add your staging deployment commands here
        # curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK_STAGING }}"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://your-app-url.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Deploy to various platforms (uncomment as needed)
    
    # Deploy to Render
    - name: Deploy to Render
      env:
        RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
      run: |
        if [ ! -z "$RENDER_DEPLOY_HOOK" ]; then
          curl -X POST "$RENDER_DEPLOY_HOOK"
          echo "✅ Deployed to Render"
        fi

    # Deploy to Railway
    - name: Deploy to Railway
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        if [ ! -z "$RAILWAY_TOKEN" ]; then
          npx @railway/cli login --token $RAILWAY_TOKEN
          npx @railway/cli up
          echo "✅ Deployed to Railway"
        fi

    # Deploy to Fly.io
    - name: Deploy to Fly.io
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      run: |
        if [ ! -z "$FLY_API_TOKEN" ]; then
          curl -L https://fly.io/install.sh | sh
          export FLYCTL_INSTALL="/home/runner/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"
          flyctl deploy
          echo "✅ Deployed to Fly.io"
        fi

    # Deploy to Vercel (if using serverless)
    - name: Deploy to Vercel
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      run: |
        if [ ! -z "$VERCEL_TOKEN" ]; then
          npm install -g vercel
          vercel --prod --token $VERCEL_TOKEN
          echo "✅ Deployed to Vercel"
        fi

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.deploy-production.result == 'success'
      run: |
        echo "🎉 Deployment successful!"
        # Add notification logic (Slack, Discord, email, etc.)
        
    - name: Notify on failure
      if: needs.deploy-production.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        # Add notification logic for failures

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run performance tests
      run: |
        # Install k6 for load testing
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
        
        # Run basic performance test
        cat > performance-test.js << 'EOF'
        import http from 'k6/http';
        import { check } from 'k6';
        
        export let options = {
          stages: [
            { duration: '30s', target: 10 },
            { duration: '1m', target: 10 },
            { duration: '30s', target: 0 },
          ],
        };
        
        export default function() {
          let response = http.get('https://your-app-url.com/api/health');
          check(response, {
            'status is 200': (r) => r.status === 200,
            'response time < 500ms': (r) => r.timings.duration < 500,
          });
        }
        EOF
        
        # Run the test (uncomment when you have a live URL)
        # k6 run performance-test.js

# ================================
# Secrets needed (add in repository settings):
# ================================
# RENDER_DEPLOY_HOOK - Webhook URL from Render
# RAILWAY_TOKEN - Railway CLI token
# FLY_API_TOKEN - Fly.io API token  
# VERCEL_TOKEN - Vercel CLI token
# VERCEL_ORG_ID - Vercel organization ID
# VERCEL_PROJECT_ID - Vercel project ID
# GEMINI_API_KEY - Google Gemini API key
# DATABASE_URL - Production database URL