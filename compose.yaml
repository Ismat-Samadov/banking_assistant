version: '3.8'

services:
  # AI Backend API
  ai-backend:
    build: .
    container_name: banking-ai-backend
    ports:
      - "8000:8000"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
      - TRANSFORMERS_CACHE=/app/models
    volumes:
      - ./vectordb:/app/vectordb
      - ./models:/app/models
      - ./data:/app/data
    command: ["python", "ai_fastapi_backend.py"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # AI Frontend
  ai-frontend:
    build: .
    container_name: banking-ai-frontend
    ports:
      - "8501:8501"
    environment:
      - API_BASE_URL=http://ai-backend:8000
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
    depends_on:
      ai-backend:
        condition: service_healthy
    command: ["streamlit", "run", "real_ai_banking_assistant.py", "--server.port=8501", "--server.address=0.0.0.0"]
    restart: unless-stopped

  # Vector Database (ChromaDB with persistence)
  vector-db:
    image: chromadb/chroma:latest
    container_name: banking-vector-db
    ports:
      - "8002:8000"
    volumes:
      - ./chroma_data:/chroma/chroma
    environment:
      - CHROMA_HOST=0.0.0.0
      - CHROMA_PORT=8000
    restart: unless-stopped

  # Redis for session management and caching
  redis:
    image: redis:7-alpine
    container_name: banking-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped

  # PostgreSQL for conversation history and analytics
  postgres:
    image: postgres:15
    container_name: banking-postgres
    environment:
      POSTGRES_DB: banking_ai
      POSTGRES_USER: banking_user
      POSTGRES_PASSWORD: banking_secure_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped

  # Nginx reverse proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: banking-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - ai-backend
      - ai-frontend
    restart: unless-stopped
    profiles:
      - production

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus
    container_name: banking-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for dashboards
  grafana:
    image: grafana/grafana
    container_name: banking-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: banking-ai-network