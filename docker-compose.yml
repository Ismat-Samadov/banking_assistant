# üèõÔ∏è Kapital Bank AI Assistant - Docker Compose Configuration
# Complete deployment stack with app, database, and optional services

version: '3.8'

services:
  # Main application
  app:
    build: 
      context: .
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VERSION: ${VERSION:-1.0.0}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
    container_name: kapital-bank-assistant
    restart: unless-stopped
    ports:
      - "${PORT:-8000}:8000"
    environment:
      - ENVIRONMENT=production
      - DEBUG=False
      - DATABASE_URL=${DATABASE_URL:-sqlite:///./data/kapital_assistant.db}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - REDIS_URL=redis://redis:6379/0
      - HOST=0.0.0.0
      - PORT=8000
      - WORKERS=${WORKERS:-4}
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - kapital_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database (optional - for production)
  postgres:
    image: postgres:15-alpine
    container_name: kapital-bank-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-kapital_bank_db}
      POSTGRES_USER: ${POSTGRES_USER:-kapital_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_me}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - kapital_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-kapital_user} -d ${POSTGRES_DB:-kapital_bank_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - postgres

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: kapital-bank-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - kapital_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Nginx Reverse Proxy (optional - for production)
  nginx:
    image: nginx:alpine
    container_name: kapital-bank-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./static:/var/www/static:ro
      - nginx_logs:/var/log/nginx
      - certbot_data:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    depends_on:
      - app
    networks:
      - kapital_network
    profiles:
      - nginx

  # SSL Certificate Manager (optional)
  certbot:
    image: certbot/certbot
    container_name: kapital-bank-certbot
    volumes:
      - certbot_data:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    profiles:
      - ssl

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: kapital-bank-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - kapital_network
    profiles:
      - monitoring

  # Grafana Dashboard (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: kapital-bank-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin_change_me}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - kapital_network
    profiles:
      - monitoring

# Development Override
  app-dev:
    build:
      context: .
      target: development
    container_name: kapital-bank-assistant-dev
    restart: "no"
    ports:
      - "${DEV_PORT:-8001}:8000"
    environment:
      - ENVIRONMENT=development
      - DEBUG=True
      - DATABASE_URL=sqlite:///./data/kapital_assistant_dev.db
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - HOST=0.0.0.0
      - PORT=8000
    volumes:
      - .:/app
      - app_data_dev:/app/data
    networks:
      - kapital_network
    profiles:
      - development

# Named volumes
volumes:
  app_data:
    driver: local
  app_logs:
    driver: local
  app_data_dev:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  certbot_data:
    driver: local
  certbot_www:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Networks
networks:
  kapital_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Example environment file (.env) configuration:
# Copy the following to your .env file and customize:
#
# # Application
# GEMINI_API_KEY=your_gemini_api_key_here
# PORT=8000
# WORKERS=4
#
# # Database
# DATABASE_URL=postgresql://kapital_user:secure_password@postgres:5432/kapital_bank_db
# POSTGRES_DB=kapital_bank_db
# POSTGRES_USER=kapital_user
# POSTGRES_PASSWORD=secure_password_change_me
#
# # Redis
# REDIS_URL=redis://redis:6379/0
#
# # Monitoring
# GRAFANA_USER=admin
# GRAFANA_PASSWORD=secure_grafana_password
#
# # Build info
# VERSION=1.0.0
#
# Usage examples:
#
# # Development with SQLite and Redis:
# docker-compose up app redis
#
# # Development mode:
# docker-compose --profile development up app-dev redis
#
# # Production with PostgreSQL:
# docker-compose --profile postgres up app postgres redis
#
# # Full production with Nginx:
# docker-compose --profile postgres --profile nginx up
#
# # With monitoring:
# docker-compose --profile postgres --profile monitoring up
#
# # SSL setup (after configuring domain):
# docker-compose --profile postgres --profile nginx --profile ssl up